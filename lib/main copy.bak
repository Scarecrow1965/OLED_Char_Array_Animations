// +-------------------------------------------------------------
//
// Equipment:
// ESP32, OLED SSD1306
//
// File: main.cpp
//
// Description:
//
// main file to engage all char array graphics, whether they be
// non-animated or animated on the ESP 32 platform
//
// History:     1-Nov-2023     Scarecrow1965   Created
//
// +-------------------------------------------------------------

// CONFIRMED: WORKS ON ESP32 AND OLED SCREEN

// install ibraries
#include <Arduino.h>
#include <U8g2lib.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif

#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

// This will enable for the OLED screen to display information
// definition of OLED display SSD1306 for Arduino Mega SCA & SDL
#define OLED_CLOCK 17 // SCA pin on Display = SCL on ESP32
#define OLED_DATA 20  // SDL pin on display = SDA on ESP32

#define LED_BUILTIN 2 // pin for onboard LED or use LED_BUILTIN as the default location

// ADAFRUIT SSD1306 Driver here to run animation
#define SCREEN_I2C_ADDR 0x3C // or 0x3C
#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 64     // OLED display height, in pixels
#define OLED_RST_PIN -1      // Reset pin (-1 if not available)

// U8G2 SSD1306 Driver here to run OLED Screen
// built constructor for the OLED function
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, OLED_CLOCK, OLED_DATA, U8X8_PIN_NONE); // This works but according to the function, it shouldn't

// NOTE: confirmed by I2C Scanner address for SSD1306 is 0x3c
// NOTE: const int SSD1306_addr = 0x3c; // to initialilze the address of the OLED display
static int oled_LineH = 0;

Adafruit_SSD1306 display(128, 64, &Wire, OLED_RST_PIN);

#include <charArrayNonAnim.h>
#include <charArrayAnim.h>

// ==================================
// ONE TIME MANDATORY FUNCTION - DO NOT REMOVE
// ==================================
void setup(void)
{
    pinMode(LED_BUILTIN, OUTPUT); // relying on GPIO2 LED to light up on MB

    Serial.begin(115200);
    Serial.println("Starting setup");

    // for U8G2 library setup
    u8g2.begin();
    u8g2.clear();
    u8g2.setFont(u8g2_font_profont10_tf);
    oled_LineH = u8g2.getFontAscent() + u8g2.getFontAscent();

    // for Adafruit library setup
    display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
    display.clearDisplay();

    Serial.println("Setup complete");
} // end setup function

// ==================================
// REPETITIVE MANDATORY FUNCTION - DO NOT REMOVE
// ==================================
void loop(void)
{
    Serial.println("Starting non-Animations");
    charArrayNonAnim();
    Serial.println("Starting Animations");
    charArrayAnim();

} // end loop function

// individual animation
// for (int count = 0; count < 28; count++)
// {
//     u8g2.clearBuffer();
//     u8g2.home();
//     u8g2.setCursor(3, oled_LineH * 1 + 2);
//     u8g2.print("Ambulance Animation");
//     u8g2.sendBuffer();
//
//     bLED = !bLED; // toggle LED State
//     digitalWrite(LED_BUILTIN, bLED);
//
//     // display count animation image
//     display.clearDisplay();
//
//     display.drawBitmap(0, 15, ambulance_Anim[count], 50, 50, 1);
//     Serial.println(count);
//     display.display();
// }

// non-animation display them all
// void smallFramechar(int i)
// {
//     display.drawBitmap(0, 17, framesInfo[i].data, framesInfo[i].width, framesInfo[i].height, 1);
//     display.display();
// }
// void loop (void){
// for (int i = 0; i < 14; i++)
// {
//     int effectime = 20;
//     display.clearDisplay();
//
//     while (effectime > 0)
//     {
//         if (framesInfo[i].width <= 50 || framesInfo[i].height <= 50)
//         {
//             u8g2.clearBuffer();
//             u8g2.home();
//             u8g2.setCursor(3, oled_LineH * 1 + 2);
//             u8g2.print(framesInfo[i].name);
//             u8g2.sendBuffer();
//             smallFramechar(i);
//         }
//         else
//         {
//             display.drawBitmap(0, 0, framesInfo[i].data, framesInfo[i].width, framesInfo[i].height, 1);
//             display.display();
//             delay(2000);
//         }
//         effectime--;
//     }
// }
// }

// animation display them all
// void loop(void)
// {
    // static bool bLED = LOW;
    // Serial.println("Starting loop");
// 
    // u8g2.clearBuffer();
    // u8g2.home();
    // u8g2.setCursor(3, oled_LineH * 1 + 2);
    // u8g2.print(animFrame[animationIndex].name);
    // u8g2.sendBuffer();
// 
    // display.clearDisplay();
    // display.drawBitmap(0, 15, animFrame[animationIndex].data + (frameIndex * animFrame[animationIndex].dataSize), animFrame[animationIndex].width, animFrame[animationIndex].height, 1);
    // display.display();
// 
    // bLED = !bLED;
    // digitalWrite(LED_BUILTIN, bLED);
// 
    // frameIndex++;
    // if (frameIndex >= Anim_LEN)
    // {
    //     frameIndex = 0;
    //     animationIndex++;
    //     if (animationIndex >= sizeof(animFrame) / sizeof(animFrame[0]))
    //     {
    //         animationIndex = 0;
    //     }
    // }
// 
    // Serial.println("ending loop");
// } // end loop function

// template for the following char PROGMEM[][] animation
// #define FRAME_WIDTH (64)
// #define FRAME_HEIGHT (64)
// void setup()
// {
//     display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
// }
// void loop()
// {
//     display.clearDisplay();
//     display.drawBitmap(32, 0, frames, FRAME_WIDTH, FRAME_HEIGHT, 1);
//     display.display();
// }
// const char PROGMEM frames[512] = {};

// =========================================================
// END OF PROGRAM
// =========================================================
